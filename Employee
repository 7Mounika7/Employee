SOURCE CODE:-

struct Employee {
    employee_id: u32,
    employee_name: String,
    email: String,
    age: u32,
    phone_number: String,
}

impl Employee {
    fn new(employee_id: u32, employee_name: String, email: String, age: u32, phone_number: String) -> Self {
        Employee {
            employee_id,
            employee_name,
            email,
            age,
            phone_number,
        }
    }
}

fn get_employee_by_id(employee_id: u32, employees: &[Employee]) -> Option<&Employee> {
    employees.iter().find(|&employee| employee.employee_id == employee_id)
}

fn get_employees_by_age(age: u32, employees: &[Employee]) -> Vec<&Employee> {
    employees.iter().filter(|&employee| employee.age == age).collect()
}

fn main() {
    let mut employees: Vec<Employee> = Vec::new();

    loop {
        println!("Enter employee details:");
        println!("Employee ID:");
        let employee_id = read_line_u32();

        if employee_id == 0 {
            break;
        }

        println!("Employee Name:");
        let employee_name = read_line();

        println!("Email:");
        let email = read_line();

        println!("Age:");
        let age = read_line_u32();

        println!("Phone Number:");
        let phone_number = read_line();

        let employee = Employee::new(employee_id, employee_name, email, age, phone_number);
        employees.push(employee);
    }

    println!("Enter employee ID to search:");
    let search_id = read_line_u32();
    if let Some(employee) = get_employee_by_id(search_id, &employees) {
        println!("Employee found:");
        println!("Employee ID: {}", employee.employee_id);
        println!("Employee Name: {}", employee.employee_name);
        println!("Email: {}", employee.email);
        println!("Age: {}", employee.age);
        println!("Phone Number: {}", employee.phone_number);
    } else {
        println!("Employee not found.");
    }

    println!("Enter age to search employees:");
    let search_age = read_line_u32();
    let employees_with_age = get_employees_by_age(search_age, &employees);
    if employees_with_age.is_empty() {
        println!("No employees with age {} found.", search_age);
    } else {
        println!("Employees with age {}:", search_age);
        for employee in employees_with_age {
            println!("Employee Name: {}", employee.employee_name);
            println!("Employee ID: {}", employee.employee_id);
            println!("Email: {}", employee.email);
            println!("Phone Number: {}", employee.phone_number);
        }
    }
}

fn read_line() -> String {
    let mut input = String::new();
    std::io::stdin().read_line(&mut input).expect("Failed to read line");
    input.trim().to_string()
}

fn read_line_u32() -> u32 {
    read_line().parse().expect("Invalid input")
}
